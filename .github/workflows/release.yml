name: Release and Deployment

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to update'
        type: choice
        required: true
        default: dev
        options:
          - dev
          - prod

jobs:
  # zendesk deploy        
  deploy:
    name: Deploy apps
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b  

      # call common node setup workflow
      - name: Node setup
        id: node-setup
        uses: ./.github/workflows/node-setup
        with:
          node-version-file: ".nvmrc"
      
      # call common get modified-brand-folders workflow
      - name: Get modified Brand folders
        id: modified-brands
        uses: ./.github/workflows/modified-brand-folders
      
      # Set zendesk env variables for each changed brand (for zendesk auth)
      - name: Set zendesk env variables for each brand
        id: zendesk-env
        env:
          CHANGED_BRANDS: ${{ steps.modified-brands.outputs.changed_brands }}
        run: |
          # setting zendesk env var for each changed brand
          # Define subdomain and brand mappings
          declare -A SUBDOMAIN_MAPPING
          declare -A BRAND_ID_MAPPING
          
          # integrate when a new brand is added/removed (with folder name)
          SUBDOMAIN_MAPPING["hc_io"]="${{ secrets.ZENDESK_SUBDOMAIN_IO }}"
          SUBDOMAIN_MAPPING["hc_send"]="${{ secrets.ZENDESK_SUBDOMAIN_SEND }}"
          SUBDOMAIN_MAPPING["hc_pagopa"]="${{ secrets.ZENDESK_SUBDOMAIN_PAGOPA }}"
          SUBDOMAIN_MAPPING["hc_home"]="${{ secrets.ZENDESK_SUBDOMAIN_HOME }}"

          # integrate when a new brand is added/removed (with folder name)
          BRAND_ID_MAPPING["hc_io"]="${{ secrets.ZENDESK_BRAND_ID_IO }}"
          BRAND_ID_MAPPING["hc_send"]="${{ secrets.ZENDESK_BRAND_ID_SEND }}"
          BRAND_ID_MAPPING["hc_pagopa"]="${{ secrets.ZENDESK_BRAND_ID_PAGOPA }}"
          BRAND_ID_MAPPING["hc_home"]="${{ secrets.ZENDESK_BRAND_ID_HOME }}"

          # Loop each changed brand folder and create .env with zendesk env variables needed for authentication
          for folder in $CHANGED_BRANDS; do
            echo "Creating .env for brand: $folder"

            # Based on .env.example, replace placeholders and save as .env
            sed \
              -e "s|<your_email@example.com>|${{ secrets.ZENDESK_EMAIL }}|g" \
              -e "s|<your_api_token>|${{ secrets.ZENDESK_API_TOKEN }}|g" \
              -e "s|<brand_subdomain>|${SUBDOMAIN_MAPPING[$folder]}|g" \
              -e "s|<brand_id>|${BRAND_ID_MAPPING[$folder]}|g" \
              "$folder/.env.example" > "$folder/.env"
          done  
      
      # Deploying theme
      - name: Upload theme
        id: upload-themes
        env:
          CHANGED_BRANDS: ${{ steps.modified-brands.outputs.changed_brands }}
        run: |
          # deploying theme
          # publish --> true = import and make theme as live | false = only import 
          # true if environment input is prod or if there is a push su 'main', false otherwise
          if [[ "${{ github.event.inputs.environment }}" == "prod" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            PUBLISH=true
          else
            PUBLISH=false
          fi

          for folder in $CHANGED_BRANDS; do
            # set/export zendesk env var to authentication 
            export $(cat "$folder/.env" | xargs)

            # Run the deployment script
            node scripts/theme-upload.js "$folder" "$PUBLISH"
          done

  # release git        
  git-release:
    needs: deploy # ensures git-release will only run if deploy succeeds
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          persist-credentials: false

      # call common node setup workflow
      - name: Node setup
        id: node-setup
        uses: ./.github/workflows/node-setup
        with:
          node-version-file: ".nvmrc"
      
      # Create a release  
      - name: Release
        id: semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.RELEASE_BOT_GIT_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.RELEASE_BOT_GIT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.RELEASE_BOT_GIT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.RELEASE_BOT_GIT_EMAIL }}
          SLACK_WEBHOOK: ${{ secrets.RELEASE_SLACK_WEBHOOK }}       

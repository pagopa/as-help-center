name: Set zendesk env var
description: "Setup zendesk env variables for each brand"

inputs:
  brands-folder:
    description: 'Space-separated name of brands folders to setup'
    type: string

runs:
  using: "composite"
  steps:
    # Setup node version based on .nvmrc file and using cache
    - name: Set zendesk env variables for each brand
        id: zendesk-env
        run: |
          # Define subdomain and brand mappings
          declare -A SUBDOMAIN_MAPPING
          declare -A BRAND_ID_MAPPING
          
          # integrate when a new brand is added/removed (with folder name)
          SUBDOMAIN_MAPPING["hc_io"]="${{ secrets.ZENDESK_SUBDOMAIN_IO }}"
          SUBDOMAIN_MAPPING["hc_send"]="${{ secrets.ZENDESK_SUBDOMAIN_SEND }}"
          SUBDOMAIN_MAPPING["hc_pagopa"]="${{ secrets.ZENDESK_SUBDOMAIN_PAGOPA }}"
          SUBDOMAIN_MAPPING["hc_home"]="${{ secrets.ZENDESK_SUBDOMAIN_HOME }}"

          # integrate when a new brand is added/removed (with folder name)
          BRAND_ID_MAPPING["hc_io"]="${{ secrets.ZENDESK_BRAND_ID_IO }}"
          BRAND_ID_MAPPING["hc_send"]="${{ secrets.ZENDESK_BRAND_ID_SEND }}"
          BRAND_ID_MAPPING["hc_pagopa"]="${{ secrets.ZENDESK_BRAND_ID_PAGOPA }}"
          BRAND_ID_MAPPING["hc_home"]="${{ secrets.ZENDESK_BRAND_ID_HOME }}"

          # Loop each input brand folder and create .env with zendesk env variables needed for authentication
          for folder in ${{ inputs.brands-folder }}; do
            echo "Creating .env for brand: $folder"

            # Based on .env.example, replace placeholders and save as .env
            sed \
              -e "s|<your_email@example.com>|${{ secrets.ZENDESK_EMAIL }}|g" \
              -e "s|<your_api_token>|${{ secrets.ZENDESK_API_TOKEN }}|g" \
              -e "s|<brand_subdomain>|${SUBDOMAIN_MAPPING[$folder]}|g" \
              -e "s|<brand_id>|${BRAND_ID_MAPPING[$folder]}|g" \
              "$folder/.env.example" > "$folder/.env"
          done  
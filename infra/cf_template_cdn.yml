Parameters:
  BucketName:
    Type: String
    Default: cac-common-lib-formation
  AliasDomainName:
    Type: String
  HostedZoneName:
    Type: String
  SSLCertificareArn:
    Type: String
  EnvSub:
    Type: String
    Default: dev

Conditions: 
  IsProductionEnvironment: !Equals [ !Ref EnvSub, prod ]

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      VersioningConfiguration:
        Status: "Enabled"
      OwnershipControls:
        Rules:
          - ObjectOwnership: "BucketOwnerEnforced"
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: "origin access control(OAC) for allowing cloudfront to access S3 bucket"
        Name: !Sub ${BucketName}.s3.eu-south-1.amazonaws.com
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  CloudFrontCachePolicy:
    Type: "AWS::CloudFront::CachePolicy"
    Properties:
      CachePolicyConfig:
        Comment: "Caching policy"
        MinTTL: !If [IsProductionEnvironment, 1, 0]
        MaxTTL: !If [IsProductionEnvironment, 31536000, 0]
        ParametersInCacheKeyAndForwardedToOrigin:
          QueryStringsConfig:
            QueryStringBehavior: "none"
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: "none"
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingGzip: true
        DefaultTTL: !If [IsProductionEnvironment, 86400, 0] 
        Name: "CachingCACPolicy"
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: cac-cdn
  Distribution:
    DependsOn:
      - Bucket
      - CloudFrontOriginAccessControl
      - CloudFrontOriginAccessIdentity
      - CloudFrontCachePolicy
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          TargetOriginId: !Sub ${BucketName}.s3.eu-south-1.amazonaws.com
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          FunctionAssociations: []
          LambdaFunctionAssociations: []
          GrpcConfig:
            Enabled: false
          TrustedSigners: []
          FieldLevelEncryptionId: ""
          TrustedKeyGroups: []
          AllowedMethods:
            - "HEAD"
            - "GET"
          CachedMethods:
            - "HEAD"
            - "GET"
          SmoothStreaming: false
          CachePolicyId: !GetAtt CloudFrontCachePolicy.Id
        Enabled: true
        Origins:
          - ConnectionTimeout: 10
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            DomainName: !GetAtt Bucket.RegionalDomainName
            Id: !Sub ${BucketName}.s3.eu-south-1.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginPath: ""
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificareArn
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
        PriceClass: "PriceClass_All"
        Staging: false
        CustomErrorResponses: []
        ContinuousDeploymentPolicyId: ""
        OriginGroups:
          Quantity: 0
          Items: []
        Aliases:
          - !Ref AliasDomainName
        IPV6Enabled: true
        HttpVersion: "http2"
        Restrictions:
          GeoRestriction:
            Locations: []
            RestrictionType: "none"
        CacheBehaviors: []
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub arn:aws:s3:::${BucketName}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"
  CNAMERecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      Name: !Ref AliasDomainName
      Type: CNAME
      TTL: "60"
      ResourceRecords:
        - !GetAtt Distribution.DomainName
